import { collection, addDoc, doc, setDoc, serverTimestamp } from 'firebase/firestore';import { db } from '../firebase/config.js';// Generate unique roster IDconst generateRosterId = () => {  const timestamp = Date.now();  const random = Math.random().toString(36).substring(2, 8);  return `roster_${timestamp}_${random}`;};// Create roster from JSON dataexport const createRosterFromData = async (jsonData, rosterName, authorName, MID) => {  try {    // Generate roster ID    const rosterId = generateRosterId();        // Convert JSON data to roster entries    const rosterEntries = jsonData.map((item, index) => ({      Role: item.Role || '',      Weapon: item.Weapon || '',      Player: item.Player || '',      Head: item.Head || '',      Chest: item.Chest || '',      Boots: item.Boots || '',      Notes: item.Notes || '',      order: index,      entryId: `entry_${Date.now()}_${index}`    }));    // Create roster data structure matching the application format    const rosterData = {      // Basic Information      rosterId: rosterId,      name: rosterName,            // User Information      MID: MID,      author: authorName,      createdBy: authorName,      createdByUserId: MID,            // Timestamps      dateCreated: serverTimestamp(),      dateModified: serverTimestamp(),            // Option Configuration Data (create basic structure for the fields we have)      optionData: {        sections: [          { id: 1, label: 'Role', options: '', categoryType: 'category1', subLabel: 'Role', isTextArea: false },          { id: 2, label: 'Weapon', options: '', categoryType: 'category2', subLabel: 'Weapon', isTextArea: false },          { id: 3, label: 'Player', options: '', categoryType: 'category3', subLabel: 'Player', isTextArea: false },          { id: 4, label: 'Head', options: '', categoryType: 'none', subLabel: 'Head', isTextArea: false },          { id: 5, label: 'Chest', options: '', categoryType: 'none', subLabel: 'Chest', isTextArea: false },          { id: 6, label: 'Boots', options: '', categoryType: 'none', subLabel: 'Boots', isTextArea: false },          { id: 7, label: 'Notes', options: '', categoryType: 'none', subLabel: 'Notes', isTextArea: true }        ],        categoryNames: {          category1: 'Role',          category2: 'Weapon',          category3: 'Player'        },        entryFields: [          { type: 'dropdown', label: 'Role', options: [], id: 'role', category: 'category1' },          { type: 'dropdown', label: 'Weapon', options: [], id: 'weapon', category: 'category2' },          { type: 'dropdown', label: 'Player', options: [], id: 'player', category: 'category3' },          { type: 'dropdown', label: 'Head', options: [], id: 'head', category: 'none' },          { type: 'dropdown', label: 'Chest', options: [], id: 'chest', category: 'none' },          { type: 'dropdown', label: 'Boots', options: [], id: 'boots', category: 'none' },          { type: 'textarea', label: 'Notes', id: 'notes', category: 'none' }        ]      },            // Roster Content      entries: rosterEntries,            // Metadata      entryCount: rosterEntries.length,      version: 'created',      lastEditedBy: authorName,            // Additional tracking      isActive: true,      tags: [],      description: ''    };    // Save to Firestore using rosterId as document ID    await setDoc(doc(db, 'rosters', rosterId), rosterData);        console.log('Roster created successfully:', {      rosterId: rosterId,      name: rosterName,      entries: rosterEntries.length    });        return { success: true, rosterId, rosterData };      } catch (error) {    console.error('Error creating roster:', error);    return { success: false, error: error.message };  }};